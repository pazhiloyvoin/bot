import ccxt
import telebot
import pandas as pd
import numpy as np
import time
import schedule

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = "7732667394:AAHHy5hBFwPrpM5bZC0V_Y6ueEZ0EyxkaWk"
CHAT_ID = "6803518891"
SYMBOLS = ["BTC/USDT", "ETH/USDT", "ARB/USDT", "MANTA/USDT", "SUI/USDT", "APT/USDT"]
TIMEFRAMES = ["15m", "30m", "1h", "4h", "1d"]

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram ===
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ BingX ===
exchange = ccxt.bingx({"rateLimit": 1000})

# === –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ===
def calculate_indicators(data):
    df = pd.DataFrame(data, columns=["timestamp", "open", "high", "low", "close", "volume"])
    df["close"] = df["close"].astype(float)

    # RSI
    delta = df["close"].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    df["RSI"] = 100 - (100 / (1 + rs))

    # MACD
    df["EMA_12"] = df["close"].ewm(span=12, adjust=False).mean()
    df["EMA_26"] = df["close"].ewm(span=26, adjust=False).mean()
    df["MACD"] = df["EMA_12"] - df["EMA_26"]
    df["MACD_signal"] = df["MACD"].ewm(span=9, adjust=False).mean()

    # Bollinger Bands
    df["SMA_20"] = df["close"].rolling(window=20).mean()
    df["STD_20"] = df["close"].rolling(window=20).std()
    df["BB_upper"] = df["SMA_20"] + (df["STD_20"] * 2)
    df["BB_lower"] = df["SMA_20"] - (df["STD_20"] * 2)

    return df.iloc[-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏

# === –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É ===
def check_trade_signals():
    for symbol in SYMBOLS:
        for timeframe in TIMEFRAMES:
            try:
                ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=30)
                indicators = calculate_indicators(ohlcv)

                # –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É
                if indicators["RSI"] < 30 and indicators["MACD"] > indicators["MACD_signal"] and indicators["close"] < indicators["BB_lower"]:
                    message = f"üì¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å {symbol} –Ω–∞ {timeframe}!\nüíπ RSI: {indicators['RSI']:.2f}\nüìà MACD: {indicators['MACD']:.4f}\nüìâ Bollinger Lower: {indicators['BB_lower']:.2f}"
                    bot.send_message(CHAT_ID, message)

                elif indicators["RSI"] > 70 and indicators["MACD"] < indicators["MACD_signal"] and indicators["close"] > indicators["BB_upper"]:
                    message = f"üì¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞—Ç—å {symbol} –Ω–∞ {timeframe}!\nüíπ RSI: {indicators['RSI']:.2f}\nüìâ MACD: {indicators['MACD']:.4f}\nüìà Bollinger Upper: {indicators['BB_upper']:.2f}"
                    bot.send_message(CHAT_ID, message)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–ª—è {symbol} ({timeframe}): {e}")

# === –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç ===
schedule.every(10).minutes.do(check_trade_signals)

if __name__ == "__main__":
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –∑–∞–ø—É—Å–∫–∞—è –∑–∞–¥–∞—á—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏